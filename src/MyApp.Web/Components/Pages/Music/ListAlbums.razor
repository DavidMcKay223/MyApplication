@page "/albums"
@rendermode InteractiveServer
@using MyApp.Application.DTOs.Music
@using MyApp.Application.UseCases.Music
@inject IAlbumUseCases AlbumUseCases

<div class="container">
    <h1 class="my-4 text-center">Albums</h1>
</div>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="ShowAddModal">Add New Album</button>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Artist</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var album in albums ?? [])
            {
                <tr>
                    <td>@album.Id</td>
                    <td>@album.Artist</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(album.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteAlbum(album)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<EditModalAlbum @ref="editModal" OnAlbumSaved="LoadAlbums" />

@code {
    private List<AlbumDto>? albums;
    private bool isLoading = true;
    private EditModalAlbum? editModal;

    protected override async Task OnInitializedAsync()
    {
        await LoadAlbums();
    }

    private async Task LoadAlbums()
    {
        isLoading = true;
        albums = await AlbumUseCases.GetAllAlbumsAsync(new AlbumSearchDto());
        isLoading = false;
    }

    private void ShowAddModal()
    {
        editModal!.Show(new AlbumDto { Id = 0, Artist = "" });
    }

    private async void ShowEditModal(int id)
    {
        var album = await AlbumUseCases.GetAlbumByIdAsync(id);
        editModal!.Show(album);
    }

    private async Task DeleteAlbum(AlbumDto dto)
    {
        await AlbumUseCases.DeleteAlbumAsync(new DeleteAlbumDto() { Id = dto.Id });
        await LoadAlbums();
    }
}
