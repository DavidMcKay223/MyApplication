@using MyApp.Application.DTOs.Music
@using MyApp.Application.UseCases.Music
@using MyApp.Domain.Enums.Music
@using MyApp.Web.Components.Shared
@using MyApp.Application.Validators.Music
@using AutoMapper
@using FluentValidation
@inject IAlbumUseCases AlbumUseCases
@inject IMapper Mapper
@inject IValidator<AlbumDto> AlbumValidator

@code {
    [Parameter]
    public EventCallback OnAlbumSaved { get; set; }

    private AlbumDto? album;
    private EditForm? EditForm;

    private FluentValidationValidator? _fluentValidationValidator;

    public void Show(AlbumDto? albumToEdit)
    {
        album = albumToEdit ?? new AlbumDto { ArtistName = "", CDs = new List<CDDto>() };
        StateHasChanged();
    }

    private void AddNewCD()
    {
        album!.CDs ??= new List<CDDto>();
        album.CDs.Add(new CDDto { Name = string.Empty, Tracks = new List<TrackDto>() });
    }

    private void AddNewTrack(CDDto cd)
    {
        cd.Tracks ??= new List<TrackDto>();
        cd.Tracks.Add(new TrackDto { Title = string.Empty, Number = cd.Tracks.Count + 1, Length = new TimeSpan() });
    }

    private async Task SaveAlbum()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            if (album!.ID == 0)
            {
                var createAlbumDto = Mapper.Map<CreateAlbumDto>(album);
                await AlbumUseCases.CreateAlbumAsync(createAlbumDto);
            }
            else
            {
                var updateAlbumDto = Mapper.Map<UpdateAlbumDto>(album);
                await AlbumUseCases.UpdateAlbumAsync(album.ID, updateAlbumDto);
            }

            album = null;
            await OnAlbumSaved.InvokeAsync();
        }
        else
        {
            EditForm?.EditContext?.NotifyValidationStateChanged();
        }
    }

    private void Cancel()
    {
        album = null;
    }
}

@if (album != null)
{
    <div class="modal-backdrop">
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content" style="height: 80%;">
                    <div class="modal-header">
                        <h5 class="modal-title">@(album.ID == 0 ? "Add Album" : "Edit Album")</h5>
                        <button type="button" class="btn-close" @onclick="Cancel"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm @ref="EditForm" Model="@album">
                            <FluentValidationValidator @ref="_fluentValidationValidator" />
                            <div class="mb-3 form-floating">
                                <InputText id="artistName" class="form-control" @bind-Value="album.ArtistName" />
                                <label for="artistName">Artist Name</label>
                                <ValidationMessage For="@(() => album.ArtistName)" />
                            </div>

                            @if (album.CDs != null)
                            {
                                @foreach (var cd in album.CDs)
                                {
                                    <div class="card mb-3">
                                        <div class="card-header">
                                            <h5>CD Details</h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="mb-3 form-floating">
                                                <InputText id="cdName" class="form-control" @bind-Value="cd.Name" />
                                                <label>CD Name</label>
                                                <ValidationMessage For="@(() => cd.Name)" />
                                            </div>
                                            <div class="mb-3 form-floating">
                                                <InputSelect id="ddl_genre" class="form-select" @bind-Value="cd.Genre">
                                                    @foreach (var genre in Enum.GetValues(typeof(Genre)))
                                                    {
                                                        <option value="@genre">@genre</option>
                                                    }
                                                </InputSelect>
                                                <label for="ddl_genre">Genre</label>
                                            </div>

                                            @if (cd.Tracks != null)
                                            {
                                                @foreach (var track in cd.Tracks)
                                                {
                                                    <div class="row g-3">
                                                        <div class="col-md-2">
                                                            <div class="mb-3 form-floating">
                                                                <InputNumber id="trackNumber" class="form-control" @bind-Value="track.Number" />
                                                                <label>Track Number</label>
                                                                <ValidationMessage For="@(() => track.Number)" />
                                                            </div>
                                                        </div>
                                                        <div class="col-md-5">
                                                            <div class="mb-3 form-floating">
                                                                <InputText id="trackTitle" class="form-control" @bind-Value="track.Title" />
                                                                <label>Track Title</label>
                                                                <ValidationMessage For="@(() => track.Title)" />
                                                            </div>
                                                        </div>
                                                        <div class="col-md-5">
                                                            <div class="mb-3 form-floating">
                                                                <CustomTimeInput TValue="TimeSpan" @bind-Value="track.Length" class="form-control" />
                                                                <label>Track Length</label>
                                                                <ValidationMessage For="@(() => track.Length)" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            <div class="mt-3">
                                                <button type="button" class="btn btn-primary" @onclick="() => AddNewTrack(cd)">Add New Track</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            <div class="mt-3">
                                <button type="button" class="btn btn-primary" @onclick="AddNewCD">Add New CD</button>
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" @onclick="SaveAlbum">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-dialog-centered {
        max-width: 80%;
        height: 80%;
    }

    .modal-content {
        display: flex;
        flex-direction: column;
        max-height: 100%;
        overflow: hidden;
    }

    .modal-body {
        flex: 1 1 auto;
        overflow-y: auto;
        max-height: calc(100vh - 325px);
    }

    .modal-footer {
        flex-shrink: 0;
    }
</style>
