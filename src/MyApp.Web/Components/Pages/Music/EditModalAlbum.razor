@using MyApp.Application.DTOs.Music
@using MyApp.Application.UseCases.Music
@inject IAlbumUseCases AlbumUseCases

@code {
    [Parameter]
    public EventCallback OnAlbumSaved { get; set; }

    private AlbumDto? album;

    public void Show(AlbumDto? albumToEdit)
    {
        album = albumToEdit;
        StateHasChanged();
    }

    private async Task SaveAlbum()
    {
        if (album!.Id == 0)
        {
            var createAlbumDto = new CreateAlbumDto { Artist = album.Artist };

            if (album.CDs != null)
            {
                createAlbumDto.CDs = [];

                foreach (var cd in album.CDs)
                {
                    var createCd = new CreateCDDto
                        {
                            Name = cd.Name,
                            Genre = cd.Genre
                        };

                    createAlbumDto.CDs.Add(createCd);

                    if (cd.Tracks != null)
                    {
                        createCd.Tracks = [];

                        foreach (var track in cd.Tracks)
                        {
                            createCd.Tracks.Add(new CreateTrackDto
                                {
                                    Number = track.Number,
                                    Title = track.Title,
                                    Length = track.Length
                                });
                        }
                    }
                }
            }

            await AlbumUseCases.CreateAlbumAsync(createAlbumDto);
        }
        else
        {
            var updateAlbumDto = new UpdateAlbumDto { Artist = album.Artist };

            if (album.CDs != null)
            {
                updateAlbumDto.CDs = [];

                foreach (var cd in album.CDs)
                {
                    var updateCd = new UpdateCDDto
                        {
                            Id = cd.Id,
                            Name = cd.Name,
                            Genre = cd.Genre
                        };

                    updateAlbumDto.CDs.Add(updateCd);

                    if (cd.Tracks != null)
                    {
                        updateCd.Tracks = [];

                        foreach (var track in cd.Tracks)
                        {
                            updateCd.Tracks.Add(new UpdateTrackDto
                                {
                                    Id = track.Id,
                                    Number = track.Number,
                                    Title = track.Title,
                                    Length = track.Length
                                });
                        }
                    }
                }
            }

            await AlbumUseCases.UpdateAlbumAsync(album.Id, updateAlbumDto);
        }

        album = null;
        await OnAlbumSaved.InvokeAsync();
    }

    private void Cancel()
    {
        album = null;
    }
}

@if (album != null)
{
    <div class="modal-backdrop">
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(album.Id == 0 ? "Add Album" : "Edit Album")</h5>
                        <button type="button" class="btn-close" @onclick="Cancel"></button>
                    </div>
                    <EditForm Model="@album">
                        <div class="modal-body">
                            <DataAnnotationsValidator />
                            <div class="mb-3 form-floating">
                                <InputText id="artistName" class="form-control" @bind-Value="album.Artist" />
                                <label for="artistName">Artist Name</label>
                                <ValidationMessage For="@(() => album.Artist)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" @onclick="SaveAlbum">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-dialog-centered {
        max-width: 500px;
    }

    .modal-content {
        padding: 20px;
    }
</style>
