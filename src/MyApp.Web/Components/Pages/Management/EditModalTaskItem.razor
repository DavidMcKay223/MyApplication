@using MyApp.Application.DTOs.Management
@using MyApp.Application.UseCases.Management
@using MyApp.Domain.Entities.Management
@using MyApp.Domain.Enums.Management
@using MyApp.Web.Components.Shared
@using MyApp.Application.Validators.Management
@using AutoMapper
@using FluentValidation
@inject ITaskItemUseCases TaskItemUseCases
@inject IMapper Mapper
@inject IValidator<TaskItemDto> TaskItemValidator

@code {
    [Parameter]
    public EventCallback OnTaskItemSaved { get; set; }
    private EditForm? EditForm;

    private TaskItemDto? TaskItem;

    private FluentValidationValidator? _fluentValidationValidator;

    public void Show(TaskItemDto? TaskItemToEdit)
    {
        TaskItem = TaskItemToEdit ?? new TaskItemDto { Title = "", Description = "" };
        StateHasChanged();
    }

    private async Task SaveTaskItem()
    {
        if (await _fluentValidationValidator!.ValidateAsync())
        {
            if (TaskItem!.ID == 0)
            {
                var createTaskItemDto = Mapper.Map<CreateTaskItemDto>(TaskItem);
                await TaskItemUseCases.CreateTaskItemAsync(createTaskItemDto);
            }
            else
            {
                var updateTaskItemDto = Mapper.Map<UpdateTaskItemDto>(TaskItem);
                await TaskItemUseCases.UpdateTaskItemAsync(TaskItem.ID, updateTaskItemDto);
            }

            TaskItem = null;
            await OnTaskItemSaved.InvokeAsync();
        }
        else
        {
            EditForm?.EditContext?.NotifyValidationStateChanged();
        }
    }

    private void Cancel()
    {
        TaskItem = null;
    }
}

@if (TaskItem != null)
{
    <div class="modal-backdrop">
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content" style="height: 80%;">
                    <div class="modal-header">
                        <h5 class="modal-title">@(TaskItem.ID == 0 ? "Add TaskItem" : "Edit TaskItem")</h5>
                        <button type="button" class="btn-close" @onclick="Cancel"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm @ref="EditForm" Model="@TaskItem">
                            <FluentValidationValidator @ref="_fluentValidationValidator" />
                            <div class="mb-3">
                                <label for="taskType" class="form-label">Task Type</label>
                                <InputSelect id="taskType" class="form-control" @bind-Value="TaskItem.TaskType">
                                    @foreach (var taskType in Enum.GetValues<TaskType>())
                                    {
                                        <option value="@taskType">@taskType</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label for="taskSubType" class="form-label">Task SubType</label>
                                <InputSelect id="taskSubType" class="form-control" @bind-Value="TaskItem.TaskSubType">
                                    @foreach (var subType in TaskTypeHelper.GetValidSubTypes(TaskItem.TaskType))
                                    {
                                        <option value="@subType">@subType</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => TaskItem.TaskSubType)" />
                            </div>
                            <div class="mb-3">
                                <label for="title" class="form-label">Title</label>
                                <InputText id="title" class="form-control" @bind-Value="TaskItem.Title" />
                                <ValidationMessage For="@(() => TaskItem.Title)" />
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" @bind-Value="TaskItem.Description" />
                                <ValidationMessage For="@(() => TaskItem.Description)" />
                            </div>
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary" @onclick="SaveTaskItem">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-dialog-centered {
        max-width: 80%;
        height: 80%;
    }

    .modal-content {
        display: flex;
        flex-direction: column;
        max-height: 100%;
        overflow: hidden;
    }

    .modal-body {
        flex: 1 1 auto;
        overflow-y: auto;
        max-height: calc(100vh - 325px);
    }

    .modal-footer {
        flex-shrink: 0;
    }
</style>
