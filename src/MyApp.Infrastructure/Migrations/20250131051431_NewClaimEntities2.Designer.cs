// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Infrastructure.Persistence;

#nullable disable

namespace MyApp.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250131051431_NewClaimEntities2")]
    partial class NewClaimEntities2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyApp.Domain.Entities.Management.TaskItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TaskObjectId")
                        .HasColumnType("int");

                    b.Property<int>("TaskObjectType")
                        .HasColumnType("int");

                    b.Property<int>("TaskSubType")
                        .HasColumnType("int");

                    b.Property<int>("TaskType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Management_TaskItem");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("Street")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressId");

                    b.ToTable("Medical_Claim_Address");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.Claim", b =>
                {
                    b.Property<int>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillingProviderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuranceProgram")
                        .HasColumnType("int");

                    b.Property<int>("InsuredId")
                        .HasColumnType("int");

                    b.Property<string>("InsuredIdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PatientSignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PhysicianSignatureDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceFacilityId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.ComplexProperty<Dictionary<string, object>>("ConditionRelated", "MyApp.Domain.Entities.Medical.Claim.ConditionRelated#ConditionRelated", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AccidentState")
                                .HasMaxLength(2)
                                .HasColumnType("nvarchar(2)");

                            b1.Property<bool>("AutoAccident")
                                .HasColumnType("bit");

                            b1.Property<int>("ConditionRelatedId")
                                .HasColumnType("int");

                            b1.Property<bool>("Employment")
                                .HasColumnType("bit");

                            b1.Property<bool>("OtherAccident")
                                .HasColumnType("bit");
                        });

                    b.HasKey("FormId");

                    b.HasIndex("BillingProviderId");

                    b.HasIndex("InsuredId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceFacilityId");

                    b.ToTable("Medical_Claim");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.DiagnosisCode", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("ClaimId");

                    b.ToTable("Medical_Claim_Diagnosis");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.InsuredInfo", b =>
                {
                    b.Property<int>("InsuredInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuredInfoId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InsuredInfoId");

                    b.HasIndex("AddressId");

                    b.ToTable("InsuredInfo");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.PatientInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RelationshipToInsured")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("PatientInfo");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.ProviderInfo", b =>
                {
                    b.Property<int>("ProviderInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderInfoId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("FederalTaxId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NpiNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProviderInfoId");

                    b.HasIndex("AddressId");

                    b.ToTable("ProviderInfo");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.ServiceLine", b =>
                {
                    b.Property<int>("ServiceLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceLineId"));

                    b.Property<decimal>("Charge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisPointer")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Modifier")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("ProcedureCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RenderingProviderId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("ServiceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ServiceStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceLineId");

                    b.HasIndex("ClaimId");

                    b.ToTable("Medical_Claim_ServiceLine");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.Album", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.ToTable("Music_Album");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.CD", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("AlbumId");

                    b.ToTable("Music_CD");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.Track", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CDId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("time");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ID");

                    b.HasIndex("CDId");

                    b.ToTable("Music_Track");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.Claim", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Medical.ProviderInfo", "BillingProvider")
                        .WithMany()
                        .HasForeignKey("BillingProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.Medical.InsuredInfo", "Insured")
                        .WithMany()
                        .HasForeignKey("InsuredId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.Medical.PatientInfo", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyApp.Domain.Entities.Medical.ProviderInfo", "ServiceFacility")
                        .WithMany()
                        .HasForeignKey("ServiceFacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("MyApp.Domain.Entities.Medical.OtherInsuranceInfo", "OtherInsurance", b1 =>
                        {
                            b1.Property<int>("OtherInsuranceInfoId")
                                .HasColumnType("int");

                            b1.Property<string>("PlanName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("PolicyHolderName")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("PolicyNumber")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.HasKey("OtherInsuranceInfoId");

                            b1.ToTable("Medical_Claim");

                            b1.WithOwner()
                                .HasForeignKey("OtherInsuranceInfoId");
                        });

                    b.Navigation("BillingProvider");

                    b.Navigation("Insured");

                    b.Navigation("OtherInsurance");

                    b.Navigation("Patient");

                    b.Navigation("ServiceFacility");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.DiagnosisCode", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Medical.Claim", "Claim")
                        .WithMany("DiagnosisCodes")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.InsuredInfo", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Medical.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.PatientInfo", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Medical.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.ProviderInfo", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Medical.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.ServiceLine", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Medical.Claim", "Claim")
                        .WithMany("ServiceLines")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.CD", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Music.Album", "Album")
                        .WithMany("CDs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.Track", b =>
                {
                    b.HasOne("MyApp.Domain.Entities.Music.CD", "CD")
                        .WithMany("Tracks")
                        .HasForeignKey("CDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CD");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Medical.Claim", b =>
                {
                    b.Navigation("DiagnosisCodes");

                    b.Navigation("ServiceLines");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.Album", b =>
                {
                    b.Navigation("CDs");
                });

            modelBuilder.Entity("MyApp.Domain.Entities.Music.CD", b =>
                {
                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
